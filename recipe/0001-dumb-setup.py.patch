From 6dc648cc4e002a06714d827017194648e3960b96 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Julian=20R=C3=BCth?= <julian.rueth@fsfe.org>
Date: Thu, 27 May 2021 02:16:45 +0200
Subject: [PATCH] simplify setup.py for conda-forge

---
 setup.py | 70 +-------------------------------------------------------
 1 file changed, 1 insertion(+), 69 deletions(-)

diff --git a/setup.py b/setup.py
index f3e19f2..16f13ba 100755
--- a/setup.py
+++ b/setup.py
@@ -1,33 +1,5 @@
 import codecs, glob, os, sys, re
 from setuptools import setup, find_packages, Extension
-from distutils import log
-
-from setuptools.command.install import install as _install
-
-add_pkg = ['cppyy', 'cppyy.__pyinstaller']
-try:
-    import __pypy__, sys
-    version = sys.pypy_version_info
-    requirements = ['cppyy-backend==1.14.4', 'cppyy-cling==6.21.7']
-    if version[0] == 5:
-        if version[1] <= 9:
-            requirements = ['cppyy-backend<0.3', 'cppyy-cling<6.12']
-            add_pkg += ['cppyy_compat']
-        elif version[1] <= 10:
-            requirements = ['cppyy-backend<0.4', 'cppyy-cling<=6.15']
-    elif version[0] == 6:
-        if version[1] <= 0:
-            requirements = ['cppyy-backend<1.1', 'cppyy-cling<=6.15']
-    elif version[0] == 7:
-        if version[1] <= 3 and version[2] <= 3:
-            requirements = ['cppyy-backend<=1.10', 'cppyy-cling<=6.18.2.3']
-except ImportError:
-    # CPython
-    requirements = ['CPyCppyy==1.12.5', 'cppyy-backend==1.14.4', 'cppyy-cling==6.21.7']
-
-setup_requirements = ['wheel']
-if 'build' in sys.argv or 'install' in sys.argv:
-    setup_requirements += requirements
 
 here = os.path.abspath(os.path.dirname(__file__))
 with codecs.open(os.path.join(here, 'README.rst'), encoding='utf-8') as f:
@@ -46,41 +18,6 @@ def find_version(*file_paths):
         return version_match.group(1)
     raise RuntimeError("Unable to find version string.")
 
-
-#
-# customized commands
-#
-class my_install(_install):
-    def run(self):
-        # base install
-        _install.run(self)
-
-        # force build of the .pch underneath the cppyy package if not available yet
-        install_path = os.path.join(os.getcwd(), self.install_libbase, 'cppyy')
-
-        try:
-            import cppyy_backend as cpb
-            if not os.path.exists(os.path.join(cpb.__file__, 'etc', 'allDict.cxx.pch')):
-                log.info("installing pre-compiled header in %s", install_path)
-                cpb.loader.set_cling_compile_options(True)
-                cpb.loader.ensure_precompiled_header(install_path, 'allDict.cxx.pch')
-        except (ImportError, AttributeError):
-            # ImportError may occur with wrong pip requirements resolution (unlikely)
-            # AttributeError will occur with (older) PyPy as it relies on older backends
-            pass
-
-    def get_outputs(self):
-        outputs = _install.get_outputs(self)
-        # pre-emptively add allDict.cxx.pch, which may or may not be created; need full
-        # path to make sure the final relative path is correct
-        outputs.append(os.path.join(os.getcwd(), self.install_libbase, 'cppyy', 'allDict.cxx.pch'))
-        return outputs
-
-
-cmdclass = {
-        'install': my_install }
-
-
 setup(
     name='cppyy',
     version=find_version('python', 'cppyy', '_version.py'),
@@ -117,18 +54,13 @@ setup(
         'Natural Language :: English'
     ],
 
-    setup_requires=setup_requirements,
-    install_requires=requirements,
-
     keywords='C++ bindings data science calling language integration',
 
     include_package_data=True,
     package_data={'': ['installer/cppyy_monkey_patch.py']},
 
     package_dir={'': 'python'},
-    packages=find_packages('python', include=add_pkg),
-
-    cmdclass=cmdclass,
+    packages=find_packages('python', include=['cppyy']),
 
     zip_safe=False,
 )
-- 
2.30.1

